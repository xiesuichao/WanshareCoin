apply from: "${rootProject.rootDir}/project_config.gradle"
def isLib = rootProject.ext.isModuleLib
//def isLib = true

if (isLib) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}
// 依赖share组件时需要此plugin
//apply plugin:'com.mob.sdk'

apply plugin: 'com.jakewharton.butterknife'

android {
    signingConfigs {
        config {
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName().replace("biz-", "")]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            if (!isLib) {
                manifest.srcFile 'src/demo/AndroidManifest.xml'
                // 合并 demo和main中的res
                res.srcDirs = ['src/demo/res', 'src/main/res']
                java.srcDirs = ['src/demo/java', 'src/main/java']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                res.srcDirs = ['src/main/res']
                java {
                    //排除java/demo文件夹下的所有文件
                    exclude 'src/demo/**'
                }

                resources {
                    exclude 'src/demo/*'
                }
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["constraint-layout"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["test-runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    api rootProject.ext.dependencies["marqueeview"]
    api rootProject.ext.dependencies["eventbus"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    api rootProject.ext.dependencies["smartRefresh"]
    api rootProject.ext.dependencies["umeng-common"]
    api rootProject.ext.dependencies["umeng-analytics"]
    api rootProject.ext.dependencies["sophix"]
    api rootProject.ext.dependencies["cardview-v7"]
    api rootProject.ext.dependencies["Luban"]
    api(rootProject.ext.dependencies["zxing-library"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["arouter-api"]) {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    api rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glideCompiler"]
    api rootProject.ext.dependencies["smartRefresh"]
    api rootProject.ext.dependencies["permission"]
    api rootProject.ext.dependencies["ws-utils"]
    api rootProject.ext.dependencies["ws-ui-dialog"]
    api rootProject.ext.dependencies["ws-permission"]
    api(rootProject.ext.dependencies["ws-album"]) {
        exclude group: 'com.wanshare.android.wscomponent'
    }
    api rootProject.ext.dependencies["ws-logger"]
    api rootProject.ext.dependencies["ws-http"]
    api rootProject.ext.dependencies["ws-ui-toolbar"]
    api rootProject.ext.dependencies["ws-ui-webview"]
    api rootProject.ext.dependencies["ws-datamanager"]
    api rootProject.ext.dependencies["ws-image"]
    api rootProject.ext.dependencies["ws-websocket"]
    api rootProject.ext.dependencies["ws-over-gfw"]
    api rootProject.ext.dependencies["ws-update"]
}

configurations.all {
    //不使用缓存，使用仓库中最新的包,更新后要重启android studio
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}